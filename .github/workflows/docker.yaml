name: Docker

# This will run when:
# - when new code is pushed to master/develop to push the tags
#   latest and develop
# - when a pull request is created and updated  to make sure the
#   Dockerfile is still valid.
# To be able to push to dockerhub, this execpts the following
# secrets to be set in the project:
# - DOCKERHUB_USERNAME : username that can push to the org
# - DOCKERHUB_PASSWORD : password asscoaited with the username
on:
  push:
    branches:
      - master
      - staging
      - expt
  pull_request:

# Certain actions will only run when this is the master repo.
env:
  MASTER_REPO: classtranscribe/WebAPI
  DOCKERHUB_ORG: classtranscribe

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        name:
          - api
          - taskengine
          - pythonrpcserver
        include:
          - name: api
            FOLDER: "."
            DOCKERFILE: API.Dockerfile
            IMAGE: api
          - name: taskengine
            FOLDER: "."
            DOCKERFILE: TaskEngine.Dockerfile
            IMAGE: taskengine
          - name: pythonrpcserver
            FOLDER: "PythonRpcServer"
            DOCKERFILE: Dockerfile
            IMAGE: pythonrpcserver
    steps:
      - uses: actions/checkout@v2

      # calculate some variables that are used later
      - name: github branch
        run: |
          BRANCH=${GITHUB_REF##*/} 
          if [ "$BRANCH" == "master" ]; then
            TAGS="latest,$(date +'%Y%m%d')"
          else
            TAGS="$BRANCH"
          fi
          if [ "$BRANCH" == "master" ]; then
            RPCBASE="latest"
          elif [ "$BRANCH" == "staging" ]; then
            RPCBASE="staging"
          elif [ "$BRANCH" == "expt" ]; then
            RPCBASE="expt"
          else
            RPCBASE="staging"
          fi
          TAGS="${TAGS},${BRANCH}-${{ github.run_number }}"
          echo "TAGS=${TAGS}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "RPCBASE=${RPCBASE}" >> $GITHUB_ENV

      # build the docker image, this will always run to make sure
      # the Dockerfile still works.
      - name: Build image
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          BRANCH: ${{ env.GITHUB_BRANCH }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
          RPCBASE: ${{ env.RPCBASE  }}
        with:
          registry: docker.pkg.github.com
          dockerfile: ${{ matrix.DOCKERFILE }}
          context: ${{ matrix.FOLDER }}
          name: ${{ github.repository_owner }}/${{ github.event.repository.name }}/frontend
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          tags: "${{ env.TAGS }}"
          buildargs: BRANCH,BUILDNUMBER,GITSHA1,RPCBASE
          no_push: true

      # this will publish to the actor (person) github packages
      - name: Publish to GitHub
        if: github.event_name == 'push' && github.repository == env.MASTER_REPO
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          BRANCH: ${{ env.GITHUB_BRANCH }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
          RPCBASE: ${{ env.RPCBASE  }}
        with:
          registry: ghcr.io
          name: ${{ github.repository_owner }}/${{ matrix.IMAGE }}
          dockerfile: ${{ matrix.DOCKERFILE }}
          context: ${{ matrix.FOLDER }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}
          tags: "${{ env.TAGS }}"
          buildargs: BRANCH,BUILDNUMBER,GITSHA1,RPCBASE

      # this will publish to the classtranscribe dockerhub repo
      - name: Publish to Docker Hub
        if: github.event_name == 'push' && github.repository == env.MASTER_REPO
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          BRANCH: ${{ env.GITHUB_BRANCH }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
          RPCBASE: ${{ env.RPCBASE  }}
        with:
          name: ${{ env.DOCKERHUB_ORG }}/${{ matrix.IMAGE }}
          dockerfile: ${{ matrix.DOCKERFILE }}
          context: ${{ matrix.FOLDER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          tags: "${{ env.TAGS }}"
          buildargs: BRANCH,BUILDNUMBER,GITSHA1,RPCBASE
